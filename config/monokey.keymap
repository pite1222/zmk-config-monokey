#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

#define MOUSE 4
#define SCROLL 5
#define NUM 6

&mt {
    flavor = "balanced";
    quick-tap-ms = <0>;
};

/ {
    combos {
        compatible = "zmk,combos";

        tab {
            bindings = <&kp TAB>;
            key-positions = <11 12>;
        };

        shift_tab {
            bindings = <&kp LS(TAB)>;
            key-positions = <12 13>;
        };

        muhennkann {
            bindings = <&to_layer_0 INT_MUHENKAN>;
            key-positions = <11 10>;
        };

        double_quotation {
            bindings = <&kp DOUBLE_QUOTES>;
            key-positions = <20 21>;
        };
    };

    macros {
        to_layer_0: to_layer_0 {
            compatible = "zmk,behavior-macro-one-param";
            #binding-cells = <1>;
            bindings = <&to 0 &macro_param_1to1 &kp MACRO_PLACEHOLDER>;
            label = "TO_LAYER_0";
        };

        /* 
         * "macro_repeat_press" という名前で、
         * キーを押している間は BackSpace を連続で入力し続けるマクロ
         */
        macro_repeat_press: macro_repeat_press {
            compatible = "zmk,behavior-macro";
            label = "MACRO_REPEAT_PRESS";
            #binding-cells = <0>;

            /*
             * bindingsの流れ（例）:
             *  1. &macro_press     → 「押下されたとき」の処理開始
             *  2. &macro_loop      → ここから離すまで繰り返し呼び出し
             *  3. &kp BACKSPACE    → 上記ループ内で毎回BackSpaceを送信
             *  4. &macro_release   → 「キーが離されたとき」の処理
             */
            bindings = <
                &macro_press
                &macro_loop
                &kp BACKSPACE
                &macro_release
            >;
        };
    };

         macro_repeated_backspace: macro_repeated_backspace {
            compatible = "zmk,behavior-macro";
            label = "MACRO_REPEATED_BACKSPACE";
            #binding-cells = <0>;

            bindings = <
                &macro_repeat_press   // 「押している間繰り返し送信」
                &kp BACKSPACE
            >;
        };
    };

    behaviors {
        lt_to_layer_0: lt_to_layer_0 {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_TO_0";
            bindings = <&mo>, <&to_layer_0>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            bindings = <
&kp Q             &kp W           &kp E         &kp R                   &kp T                                &kp Y                       &kp U                    &kp I     &kp O               &kp P
&mt LCTRL A       &kp S           &kp D         &kp F                   &kp G                                &kp H                       &kp J                    &kp K     &lt_to_layer_0 5 L  &mt RCTRL ENTER
&mt LEFT_SHIFT Z  &kp X           &kp C         &kp V                   &kp B                                &kp N                       &kp M                    &mkp MB1  &mkp MB2            &mt RIGHT_SHIFT SLASH
&kp LCTRL         &kp LEFT_SHIFT  &kp LEFT_ALT  &mt LEFT_COMMAND LANG2  &lt 1 SPACE  &lt_to_layer_0 2 TAB    &lt_to_layer_0 3 BACKSPACE  &mt RIGHT_COMMAND LANG1                                &kp RIGHT_ALT
            >;

            sensor-bindings = <&inc_dec_kp PG_UP PAGE_DOWN>;
        };

        FUNCTION {
            bindings = <
&kp EXCLAMATION       &kp AT_SIGN           &kp HASH        &kp DOLLAR  &kp PERCENT           &kp CARET          &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS
&kp LS(LG(NUMBER_3))  &kp LS(LG(NUMBER_4))  &kp LS(LG(N5))  &trans      &trans                &kp DOUBLE_QUOTES  &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp MINUS             &kp EQUAL
&trans                &trans                &trans          &trans      &trans                &kp COLON          &trans            &kp COMMA          &kp PERIOD            &kp BACKSLASH
&trans                &trans                &trans          &trans      &trans       &mo 6    &trans             &trans                                                     &trans
            >;
        };

        NUM {
            bindings = <
&kp F1  &kp F2  &kp LC(NUMBER_1)  &kp LC(NUMBER_2)  &kp LC(NUMBER_3)            &kp NUMBER_1  &kp NUMBER_2  &kp NUMBER_3  &kp N0        &trans
&kp F4  &kp F5  &kp LC(NUMBER_4)  &kp LC(N5)        &kp LC(NUMBER_6)            &kp NUMBER_4  &kp N5        &kp NUMBER_6  &kp PLUS      &kp MINUS
&kp F3  &kp F6  &kp LC(N7)        &kp LC(N8)        &kp LC(N9)                  &kp N7        &kp N8        &kp N9        &kp ASTERISK  &kp SLASH
&trans  &trans  &trans            &trans            &trans            &trans    &kp MINUS     &kp PERIOD                                &trans
            >;
        };

        ARROW {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &trans  &trans          &kp UP_ARROW    &trans           &trans
&trans  &trans  &trans  &trans  &trans            &trans  &kp LEFT_ARROW  &kp DOWN_ARROW  &kp RIGHT_ARROW  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans          &trans          &trans           &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                                           &bootloader
            >;

            sensor-bindings = <&inc_dec_kp LC(PAGE_UP) LC(PAGE_DOWN)>;
        };

        MOUSE {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                  &trans
            >;
        };

        SCROLL {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans            &trans  &trans  &trans  &trans  &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans  &trans                  &trans
            >;
        };

        layer_6 {
            bindings = <
&trans  &trans  &trans  &trans  &trans            &bt BT_SEL 0  &bt BT_SEL 1  &bt BT_SEL 2  &bt BT_SEL 3  &bt BT_CLR
&trans  &trans  &trans  &trans  &trans            &kp A         &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans            &trans        &trans        &trans        &trans        &trans
&trans  &trans  &trans  &trans  &trans  &trans    &trans        &bootloader                               &trans
            >;
        };
    };
};
